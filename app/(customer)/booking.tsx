import React, { useState, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  ActivityIndicator,
  Alert,
  Dimensions 
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { ArrowLeft, Calendar, Clock, User, ChevronLeft, ChevronRight, CheckCircle } from 'lucide-react-native';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/context/AuthContext';
import TimeSlotGrid from '@/components/TimeSlotGrid';

const { width } = Dimensions.get('window');

export default function Booking() {
  const router = useRouter();
  const { user } = useAuth();
  const { serviceId, businessId } = useLocalSearchParams<{ serviceId: string; businessId: string }>();
  
  const [service, setService] = useState<any>(null);
  const [business, setBusiness] = useState<any>(null);
  const [staff, setStaff] = useState<any[]>([]);
  const [workingHours, setWorkingHours] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  
  // Se√ßim state'leri
  const [selectedStaff, setSelectedStaff] = useState<any>(null);
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [currentStep, setCurrentStep] = useState(1); // 1: Personel, 2: Tarih, 3: Saat
  
  // Tarih navigasyonu
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [conflictingSlots, setConflictingSlots] = useState<string[]>([]);

  // Veri √ßekme
  const fetchBookingData = async () => {
    if (!serviceId || !businessId) return;
    
    try {
      setLoading(true);
      
      // Hizmet bilgileri
      const { data: serviceData, error: serviceError } = await supabase
        .from('services')
        .select('*')
        .eq('id', serviceId)
        .single();

      if (serviceError) {
        console.error('Service fetch error:', serviceError);
        return;
      }
      setService(serviceData);

      // ƒ∞≈ületme bilgileri
      const { data: businessData, error: businessError } = await supabase
        .from('businesses')
        .select('*')
        .eq('id', businessId)
        .single();

      if (businessError) {
        console.error('Business fetch error:', businessError);
        return;
      }
      setBusiness(businessData);

      // Personel bilgileri
      const { data: staffData, error: staffError } = await supabase
        .from('staff')
        .select('*')
        .eq('business_id', businessId)
        .eq('can_take_appointments', true);

      let allStaff = staffData || [];
      
      // ƒ∞≈ületme sahibini otomatik personel olarak ekle
      const businessOwner = {
        id: businessId,
        business_id: businessId,
        position: 'ƒ∞≈ületme Sahibi',
        can_take_appointments: true,
        avatar: null,
        created_at: new Date().toISOString()
      };
      
      // ƒ∞≈ületme sahibini listenin ba≈üƒ±na ekle
      allStaff = [businessOwner, ...allStaff];
      
      setStaff(allStaff);
      
      // Eƒüer tek personel varsa (sadece i≈ületme sahibi) otomatik se√ß ve adƒ±mƒ± atla
      if (allStaff.length === 1) {
        setSelectedStaff(allStaff[0]);
        setCurrentStep(2);
      }

      // √áalƒ±≈üma saatleri
      const { data: hoursData, error: hoursError } = await supabase
        .from('working_hours')
        .select('*')
        .eq('business_id', businessId)
        .order('day_of_week');

      if (!hoursError && hoursData) {
        setWorkingHours(hoursData);
      }

    } catch (error) {
      console.error('Fetch booking data error:', error);
    } finally {
      setLoading(false);
    }
  };

  // T√ºm olasƒ± slotlarƒ± √ºret (√ßakƒ±≈üma kontrol√º i√ßin)
  const generateAllPossibleSlots = async (): Promise<string[]> => {
    if (!selectedDate || !workingHours.length) return [];

    const dayOfWeek = selectedDate.getDay();
    const workingDay = workingHours.find(h => h.day_of_week === dayOfWeek);
    
    if (!workingDay || !workingDay.is_open) {
      return [];
    }

    const slots: string[] = [];
    const startTime = workingDay.open_time; // "09:00"
    const endTime = workingDay.close_time; // "18:00"
    
    if (!startTime || !endTime) {
      return [];
    }

    // Saat aralƒ±klarƒ±nƒ± olu≈ütur (15dk aralƒ±klarla)
    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);
    
    let currentHour = startHour;
    let currentMinute = startMinute;
    
    while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
      const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
      slots.push(timeString);
      
      // 15 dakika ekle
      currentMinute += 15;
      if (currentMinute >= 60) {
        currentMinute = 0;
        currentHour++;
      }
    }
    
    return slots;
  };

  // Yeni sistem: Business Available Slots kullanarak uygunluk kontrol√º
  const fetchAvailableSlots = async () => {
    if (!businessId || !selectedDate) return;
    
    try {
      console.log('üéØ Yeni sistem: Available slots √ßekiliyor:', {
        selectedDate,
        businessId,
        appointmentDate: selectedDate.toISOString().split('T')[0]
      });
      
      // 1. Mevcut randevularƒ± √ßek (hizmet s√ºresi boyunca √ßakƒ±≈üma kontrol√º i√ßin)
      const appointmentDate = selectedDate.toISOString().split('T')[0];
      // M√º≈üteri tarafƒ±nda staff se√ßimi: eƒüer staff se√ßilmi≈üse onu kullan, yoksa null (i≈ületme sahibi)
      const staffId = selectedStaff?.id === business?.id ? null : selectedStaff?.id || null;
      
      let appointmentQuery = supabase
        .from('appointments')
        .select('id, start_time, end_time, status')
        .eq('business_id', businessId)
        .eq('appointment_date', appointmentDate)
        .in('status', ['confirmed', 'pending']);
      
      // Staff ID kontrol√º
      if (staffId === null) {
        appointmentQuery = appointmentQuery.is('staff_id', null);
      } else {
        appointmentQuery = appointmentQuery.eq('staff_id', staffId);
      }
      
      const { data: appointments, error: appointmentError } = await appointmentQuery;
      
      if (appointmentError) {
        console.error('‚ùå Randevu √ßekme hatasƒ±:', appointmentError);
        return fetchAppointmentsAndConflicts();
      }
      
      console.log('üéØ √áekilen randevular:', appointments?.length || 0, appointments);
      
      // 2. ƒ∞≈ületme √ßalƒ±≈üma saatlerini √ßek
      const dayOfWeek = selectedDate.getDay(); // 0=Pazar, 1=Pazartesi, ..., 6=Cumartesi
      const { data: workingHours, error: workingHoursError } = await supabase
        .from('working_hours')
        .select('open_time, close_time, is_open')
        .eq('business_id', businessId)
        .eq('day_of_week', dayOfWeek)
        .single();
      
      if (workingHoursError) {
        console.error('‚ùå √áalƒ±≈üma saatleri √ßekme hatasƒ±:', workingHoursError);
      }
      
      const businessCloseTime = workingHours?.close_time || '18:00'; // Varsayƒ±lan kapatƒ±≈ü
      console.log('üï∞Ô∏è ƒ∞≈ületme kapatƒ±≈ü saati:', businessCloseTime);
      
      // 3. T√ºm olasƒ± slotlarƒ± olu≈ütur
      const allPossibleSlots = await generateAllPossibleSlots();
      
      // 3. √áakƒ±≈üan slotlarƒ± hesapla (hizmet s√ºresi boyunca)
      const conflictSlots: string[] = [];
      
      appointments?.forEach((apt) => {
        const normalizedStartTime = apt.start_time.substring(0, 5); // "16:00:00" -> "16:00"
        const normalizedEndTime = apt.end_time.substring(0, 5);
        
        console.log('üîç Randevu √ßakƒ±≈üma kontrol√º:', {
          start: normalizedStartTime,
          end: normalizedEndTime
        });
        
        // Hizmet s√ºresi boyunca t√ºm slotlarƒ± √ßakƒ±≈üan olarak i≈üaretle
        const [startHour, startMinute] = normalizedStartTime.split(':').map(Number);
        const [endHour, endMinute] = normalizedEndTime.split(':').map(Number);
        
        let currentHour = startHour;
        let currentMinute = startMinute;
        
        // Randevu s√ºresi boyunca 15dk aralƒ±klarla t√ºm slotlarƒ± ekle
        while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
          const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
          if (!conflictSlots.includes(timeString)) {
            conflictSlots.push(timeString);
            console.log('üö´ √áakƒ±≈üan slot eklendi:', timeString);
          }
          
          // 15 dakika ekle
          currentMinute += 15;
          if (currentMinute >= 60) {
            currentMinute = 0;
            currentHour += 1;
          }
        }
      });
      
      // 4. Se√ßilen hizmetin s√ºresi boyunca √ßakƒ±≈üma kontrol√º (m√º≈üteri se√ßim yaparken)
      if (service && service.duration) {
        const serviceDurationMinutes = service.duration;
        console.log('üéØ Hizmet s√ºresi:', serviceDurationMinutes, 'dakika');
        
        // Her slot i√ßin, se√ßildiƒüinde hizmet s√ºresi boyunca √ßakƒ±≈üma olup olmadƒ±ƒüƒ±nƒ± kontrol et
        const additionalConflicts: string[] = [];
        
        allPossibleSlots.forEach(slot => {
          const [slotHour, slotMinute] = slot.split(':').map(Number);
          
          // Bu slottan ba≈ülayarak hizmet s√ºresi boyunca √ßakƒ±≈üma var mƒ±?
          let checkHour = slotHour;
          let checkMinute = slotMinute;
          let hasConflict = false;
          
          // Hizmet s√ºresi boyunca kontrol et
          const endCheckMinute = slotMinute + serviceDurationMinutes;
          const endCheckHour = slotHour + Math.floor(endCheckMinute / 60);
          const finalEndCheckMinute = endCheckMinute % 60;
          
          while (checkHour < endCheckHour || (checkHour === endCheckHour && checkMinute < finalEndCheckMinute)) {
            const checkTimeString = `${checkHour.toString().padStart(2, '0')}:${checkMinute.toString().padStart(2, '0')}`;
            
            if (conflictSlots.includes(checkTimeString)) {
              hasConflict = true;
              break;
            }
            
            // 15 dakika ekle
            checkMinute += 15;
            if (checkMinute >= 60) {
              checkMinute = 0;
              checkHour += 1;
            }
          }
          
          // Eƒüer √ßakƒ±≈üma varsa bu slot da se√ßilemez
          if (hasConflict && !additionalConflicts.includes(slot)) {
            additionalConflicts.push(slot);
            console.log('‚ö†Ô∏è Hizmet s√ºresi nedeniyle √ßakƒ±≈üan slot:', slot);
          }
        });
        
        // 5. YETERSƒ∞Z BO≈ûLUK KONTROL√ú - Kalan aralƒ±k hizmet s√ºresine yetiyor mu?
        console.log('üîç Yetersiz bo≈üluk kontrol√º ba≈ülƒ±yor...');
        
        allPossibleSlots.forEach(slot => {
          // Bu slot zaten √ßakƒ±≈üan olarak i≈üaretliyse kontrol etme
          if (conflictSlots.includes(slot) || additionalConflicts.includes(slot)) {
            return;
          }
          
          const [slotHour, slotMinute] = slot.split(':').map(Number);
          
          // ƒ∞≈ületme kapatƒ±≈ü saati kontrol√º
          const [closeHour, closeMinute] = businessCloseTime.split(':').map(Number);
          const slotEndHour = slotHour + Math.floor((slotMinute + serviceDurationMinutes) / 60);
          const slotEndMinute = (slotMinute + serviceDurationMinutes) % 60;
          
          // Eƒüer hizmet biti≈ü saati i≈ületme kapatƒ±≈ü saatinden sonraysa, slot kapatƒ±lƒ±r
          if (slotEndHour > closeHour || (slotEndHour === closeHour && slotEndMinute > closeMinute)) {
            additionalConflicts.push(slot);
            console.log('üï∞Ô∏è Kapatƒ±≈ü saati nedeniyle kƒ±rmƒ±zƒ± slot:', slot, 
              `(Hizmet biti≈ü: ${slotEndHour.toString().padStart(2, '0')}:${slotEndMinute.toString().padStart(2, '0')}, Kapatƒ±≈ü: ${businessCloseTime})`);
            return; // Bu slot i√ßin ba≈üka kontrol yapmaya gerek yok
          }
          
          // Bu slottan sonraki ilk √ßakƒ±≈üan slotu bul
          let nextConflictFound = false;
          let availableGapMinutes = 0;
          
          let checkHour = slotHour;
          let checkMinute = slotMinute;
          
          // Maksimum kontrol s√ºresi (√ßalƒ±≈üma saati sonuna kadar)
          const maxCheckHours = 10; // 10 saat sonrasƒ±na kadar kontrol et
          let checkCount = 0;
          
          while (checkCount < (maxCheckHours * 4)) { // 15dk aralƒ±klarla 10 saat = 40 kontrol
            const checkTimeString = `${checkHour.toString().padStart(2, '0')}:${checkMinute.toString().padStart(2, '0')}`;
            
            // Bu saat √ßakƒ±≈üan mƒ±?
            if (conflictSlots.includes(checkTimeString)) {
              nextConflictFound = true;
              break;
            }
            
            // Bo≈üluk s√ºresini artƒ±r
            availableGapMinutes += 15;
            
            // Eƒüer hizmet s√ºresine yetecek kadar bo≈üluk varsa, bu slot uygun
            if (availableGapMinutes >= serviceDurationMinutes) {
              break;
            }
            
            // 15 dakika ekle
            checkMinute += 15;
            if (checkMinute >= 60) {
              checkMinute = 0;
              checkHour += 1;
            }
            
            checkCount++;
          }
          
          // Eƒüer yeterli bo≈üluk yoksa bu slot da kƒ±rmƒ±zƒ± olmalƒ±
          if (availableGapMinutes < serviceDurationMinutes) {
            additionalConflicts.push(slot);
            console.log('üìè Yetersiz bo≈üluk nedeniyle kƒ±rmƒ±zƒ± slot:', slot, 
              `(Mevcut bo≈üluk: ${availableGapMinutes}dk, Gerekli: ${serviceDurationMinutes}dk)`);
          } else {
            console.log('‚úÖ Yeterli bo≈üluk var:', slot, 
              `(Mevcut bo≈üluk: ${availableGapMinutes}dk, Gerekli: ${serviceDurationMinutes}dk)`);
          }
        });
        
        // Ek √ßakƒ±≈ümalarƒ± ana listeye ekle
        additionalConflicts.forEach(slot => {
          if (!conflictSlots.includes(slot)) {
            conflictSlots.push(slot);
          }
        });
      }
      
      console.log('üéØ Toplam √ßakƒ±≈üan slotlar:', conflictSlots);
      
      setConflictingSlots(conflictSlots);
      setAvailableTimeSlots(allPossibleSlots);
      
    } catch (error) {
      console.error('‚ùå Available slots sistemi hatasƒ±:', error);
      // Fallback: Eski sistem
      fetchAppointmentsAndConflicts();
    }
  };
  
  // Fallback: Eski randevu √ßekme sistemi
  const fetchAppointmentsAndConflicts = async () => {
    if (!businessId || !selectedDate) return;
    
    try {
      console.log('‚ö†Ô∏è Fallback: Eski sistem randevular √ßekiliyor:', {
        selectedDate,
        selectedStaff,
        businessId
      });
      
      let query = supabase
        .from('appointments')
        .select('id, start_time, end_time, status, customer_id, created_at')
        .eq('business_id', businessId)
        .eq('appointment_date', selectedDate.toISOString().split('T')[0])
        .in('status', ['confirmed', 'pending']);
      
      const appointmentDate = selectedDate.toISOString().split('T')[0];
      const staffId = selectedStaff?.id === business?.id ? null : selectedStaff?.id || null;
      
      console.log('üîç Sorgu parametreleri:', {
        businessId,
        appointmentDate,
        staffId,
        status: ['confirmed', 'pending']
      });
      
      // Staff ID kontrol√º - null ise is.null kullan, deƒüilse eq kullan
      if (staffId === null) {
        query = query.is('staff_id', null);
        console.log('üîç Staff ID null sorgusu eklendi');
      } else {
        query = query.eq('staff_id', staffId);
        console.log('üîç Staff ID sorgusu eklendi:', staffId);
      }
      
      const { data: appointments, error } = await query;

      console.log('Randevu sorgusu detaylarƒ±:', {
        businessId,
        appointmentDate,
        staffId,
      });

      if (error) {
        console.error('‚ùå Randevu √ßekme hatasƒ±:', error);
        return [];
      }
      
      console.log('üìÖ √áekilen randevular (toplam:', appointments?.length || 0, '):', appointments);
      
      // Her randevuyu detaylƒ± logla
      appointments?.forEach((apt, index) => {
        console.log(`üìã Randevu ${index + 1}:`, {
          id: apt.id,
          start_time: apt.start_time,
          end_time: apt.end_time,
          status: apt.status,
          customer_id: apt.customer_id,
          created_at: apt.created_at
        });
      });
      console.log('Randevu sayƒ±sƒ±:', appointments?.length || 0);

      // √áakƒ±≈üan saatleri belirle - hizmet s√ºresini de dikkate al
      const conflicts: string[] = [];
      appointments?.forEach((apt, index) => {
        console.log(`Randevu ${index + 1}:`, {
          start_time: apt.start_time,
          end_time: apt.end_time,
          start_format: typeof apt.start_time,
          end_format: typeof apt.end_time
        });
        
        // Saat formatƒ±nƒ± normalize et (HH:MM:SS -> HH:MM)
        const normalizedStartTime = apt.start_time.substring(0, 5); // "16:00:00" -> "16:00"
        const normalizedEndTime = apt.end_time.substring(0, 5);
        
        console.log(`Normalize edilmi≈ü saatler:`, {
          original_start: apt.start_time,
          normalized_start: normalizedStartTime,
          original_end: apt.end_time,
          normalized_end: normalizedEndTime
        });
        
        // Ba≈ülangƒ±√ß saatini ekle
        conflicts.push(normalizedStartTime);
        
        // Hizmet s√ºresi boyunca t√ºm slotlarƒ± √ßakƒ±≈üan olarak i≈üaretle
        if (service && normalizedStartTime && normalizedEndTime) {
          const [startHour, startMinute] = normalizedStartTime.split(':').map(Number);
          const [endHour, endMinute] = normalizedEndTime.split(':').map(Number);
          
          let currentHour = startHour;
          let currentMinute = startMinute;
          
          // Randevu s√ºresi boyunca 15dk aralƒ±klarla t√ºm slotlarƒ± ekle
          while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
            const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
            if (!conflicts.includes(timeString)) {
              conflicts.push(timeString);
            }
            
            // 15 dakika ekle
            currentMinute += 15;
            if (currentMinute >= 60) {
              currentMinute = 0;
              currentHour += 1;
            }
          }
        }
      });
      
      console.log('√áakƒ±≈üan saat slotlarƒ±:', conflicts);
      setConflictingSlots(conflicts);
    } catch (error) {
      console.error('Fetch appointments error:', error);
    }
  };

  // Uygun saatleri hesapla
  const generateTimeSlots = async () => {
    if (!selectedDate || !workingHours.length) return;

    const dayOfWeek = selectedDate.getDay();
    const workingDay = workingHours.find(h => h.day_of_week === dayOfWeek);
    
    if (!workingDay || !workingDay.is_open) {
      setAvailableTimeSlots([]);
      return;
    }

    const slots: string[] = [];
    const startTime = workingDay.open_time; // "09:00"
    const endTime = workingDay.close_time; // "18:00"
    
    if (!startTime || !endTime) {
      setAvailableTimeSlots([]);
      return;
    }

    // Saat aralƒ±klarƒ±nƒ± olu≈ütur (15dk aralƒ±klarla)
    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);
    
    let currentHour = startHour;
    let currentMinute = startMinute;
    
    while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
      const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
      slots.push(timeString);
      
      // 15 dakika ekle
      currentMinute += 15;
      if (currentMinute >= 60) {
        currentMinute = 0;
        currentHour++;
      }
    }
    
    setAvailableTimeSlots(slots);
    
    console.log('Uygun saat slotlarƒ± olu≈üturuldu:', slots);
  };

  // Randevu olu≈ütur
  const createAppointment = async () => {
    if (!user || !service || !business || !selectedDate || !selectedTime) {
      Alert.alert('Hata', 'L√ºtfen t√ºm bilgileri doldurun');
      return;
    }

    try {
      const appointmentDate = selectedDate.toISOString().split('T')[0];
      const [hours, minutes] = selectedTime.split(':').map(Number);
      const startTime = selectedTime;
      
      // Hizmet s√ºresini ekleyerek biti≈ü saatini hesapla
      const serviceDuration = service.duration;
      const endMinutes = minutes + serviceDuration;
      const endHours = hours + Math.floor(endMinutes / 60);
      const finalEndMinutes = endMinutes % 60;
      const endTime = `${endHours.toString().padStart(2, '0')}:${finalEndMinutes.toString().padStart(2, '0')}`;

      // ƒ∞≈ületme sahibi se√ßildiƒüinde staff_id null olmalƒ±
      const finalStaffId = selectedStaff?.position === 'ƒ∞≈ületme Sahibi' ? null : selectedStaff?.id;
      
      console.log('Randevu olu≈üturuluyor:', {
        business_id: businessId,
        customer_id: user.id,
        staff_id: finalStaffId,
        service_id: serviceId,
        appointment_date: appointmentDate,
        start_time: startTime,
        end_time: endTime,
        status: 'pending'
      });

      const appointmentData = {
        business_id: businessId,
        customer_id: user.id,
        staff_id: finalStaffId,
        service_id: serviceId,
        appointment_date: appointmentDate,
        start_time: startTime,
        end_time: endTime,
        status: 'pending',
        notes: null
      };
      
      console.log('M√º≈üteri randevu kaydediliyor:', appointmentData);
      console.log('User bilgisi:', user);
      console.log('Business ID:', businessId);
      console.log('Service ID:', serviceId);
      
      const { data, error } = await supabase
        .from('appointments')
        .insert(appointmentData)
        .select()
        .single();

      if (error) {
        console.error('Appointment creation error:', error);
        console.error('Hata detaylarƒ±:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        Alert.alert('Hata', `Randevu olu≈üturulamadƒ±: ${error.message}`);
        return;
      }

      console.log('Randevu ba≈üarƒ±yla olu≈üturuldu:', data);
      
      // ‚úÖ Trigger otomatik bildirim olu≈üturuyor, manuel kod gerekmez
      
      // Onay sayfasƒ±na y√∂nlendir
      router.push(`/(customer)/booking-confirmation?appointmentId=${data.id}`);

    } catch (error: any) {
      console.error('Create appointment error:', error);
      Alert.alert('Hata', 'Randevu olu≈üturulurken bir hata olu≈ütu');
    }
  };

  useEffect(() => {
    fetchBookingData();
  }, [serviceId, businessId]);

  useEffect(() => {
    if (selectedDate && workingHours.length && selectedStaff) {
      generateTimeSlots();
    }
  }, [selectedDate, workingHours, selectedStaff]);

  // Tarih deƒüi≈ütiƒüinde available slots √ßek
  useEffect(() => {
    if (selectedDate && businessId) {
      console.log('Tarih deƒüi≈üti, available slots √ßekiliyor:', {
        selectedDate: selectedDate.toISOString().split('T')[0],
        businessId
      });
      fetchAvailableSlots();
    }
  }, [selectedDate, selectedStaff, businessId]);

  const getDayName = (date: Date) => {
    const days = ['Pazar', 'Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi'];
    return days[date.getDay()];
  };

  const getMonthName = (date: Date) => {
    const months = ['Ocak', '≈ûubat', 'Mart', 'Nisan', 'Mayƒ±s', 'Haziran', 
                   'Temmuz', 'Aƒüustos', 'Eyl√ºl', 'Ekim', 'Kasƒ±m', 'Aralƒ±k'];
    return months[date.getMonth()];
  };

  // Tarih se√ßimi i√ßin g√ºnleri olu≈ütur
  const generateDays = () => {
    const today = new Date();
    const days = [];
    
    for (let i = 0; i < 14; i++) { // 2 hafta
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      days.push(date);
    }
    
    return days;
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#3b82f6" />
        <Text style={styles.loadingText}>Y√ºkleniyor...</Text>
      </View>
    );
  }

  if (!service || !business) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Randevu bilgileri bulunamadƒ±</Text>
        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
          <Text style={styles.backButtonText}>Geri D√∂n</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backIcon} onPress={() => router.back()}>
          <ArrowLeft size={24} color="#1e293b" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Randevu Al</Text>
      </View>

      {/* Service Info */}
      <View style={styles.serviceInfo}>
        <Text style={styles.serviceName}>{service.name}</Text>
        <Text style={styles.businessName}>{business.business_name}</Text>
        <Text style={styles.servicePrice}>‚Ç∫{service.price} ‚Ä¢ {service.duration} dk</Text>
      </View>

      {/* Steps */}
      <View style={styles.stepsContainer}>
        <View style={[styles.step, currentStep >= 1 && styles.activeStep]}>
          <Text style={[styles.stepText, currentStep >= 1 && styles.activeStepText]}>1</Text>
        </View>
        <View style={[styles.stepLine, currentStep >= 2 && styles.activeStepLine]} />
        <View style={[styles.step, currentStep >= 2 && styles.activeStep]}>
          <Text style={[styles.stepText, currentStep >= 2 && styles.activeStepText]}>2</Text>
        </View>
        <View style={[styles.stepLine, currentStep >= 3 && styles.activeStepLine]} />
        <View style={[styles.step, currentStep >= 3 && styles.activeStep]}>
          <Text style={[styles.stepText, currentStep >= 3 && styles.activeStepText]}>3</Text>
        </View>
      </View>

      <ScrollView style={styles.content}>
        {/* Step 1: Personel Se√ßimi */}
        {currentStep === 1 && (
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>Personel Se√ßin</Text>
            {staff.length === 0 ? (
              <Text style={styles.noStaffText}>Bu hizmet i√ßin uygun personel bulunamadƒ±</Text>
            ) : (
              staff.map((member) => (
                <TouchableOpacity
                  key={member.id}
                  style={[
                    styles.staffCard,
                    selectedStaff?.id === member.id && styles.selectedStaffCard
                  ]}
                  onPress={() => {
                    setSelectedStaff(member);
                    setCurrentStep(2);
                  }}
                >
                  <View style={[
                    styles.staffAvatar,
                    member.position === 'ƒ∞≈ületme Sahibi' && styles.ownerAvatar
                  ]}>
                    {member.position === 'ƒ∞≈ületme Sahibi' ? (
                      <Text style={styles.ownerInitial}>üë®‚Äçüíº</Text>
                    ) : (
                      <User size={24} color="#6b7280" />
                    )}
                  </View>
                  <Text style={[
                    styles.staffName,
                    member.position === 'ƒ∞≈ületme Sahibi' && styles.ownerName
                  ]}>
                    {member.position}
                  </Text>
                  {selectedStaff?.id === member.id && (
                    <View style={styles.selectedIcon}>
                      <CheckCircle size={20} color="#3b82f6" />
                    </View>
                  )}
                </TouchableOpacity>
              ))
            )}
          </View>
        )}

        {/* Step 2: Tarih Se√ßimi */}
        {currentStep === 2 && (
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>Tarih Se√ßin</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.datesContainer}>
              {generateDays().map((date, index) => (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.dateCard,
                    selectedDate.toDateString() === date.toDateString() && styles.selectedDateCard
                  ]}
                  onPress={() => {
                    setSelectedDate(date);
                    setCurrentStep(3);
                  }}
                >
                  <Text style={[
                    styles.dayName,
                    selectedDate.toDateString() === date.toDateString() && styles.selectedDateText
                  ]}>
                    {getDayName(date).slice(0, 3)}
                  </Text>
                  <Text style={[
                    styles.dayNumber,
                    selectedDate.toDateString() === date.toDateString() && styles.selectedDateText
                  ]}>
                    {date.getDate()}
                  </Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
          </View>
        )}

        {/* Step 3: Saat Se√ßimi */}
        {currentStep === 3 && (
          <View style={styles.stepContent}>
            <Text style={styles.stepTitle}>
              {selectedDate.getDate()} {getMonthName(selectedDate)} - Saat Se√ßin
            </Text>
            {availableTimeSlots.length === 0 ? (
              <Text style={styles.noSlotsText}>Bu tarih i√ßin uygun saat bulunamadƒ±</Text>
            ) : (
              <TimeSlotGrid
                availableSlots={availableTimeSlots}
                conflictSlots={conflictingSlots}
                selectedTime={selectedTime}
                onTimeSelect={setSelectedTime}
              />
            )}
          </View>
        )}
      </ScrollView>

      {/* Bottom Button */}
      {selectedTime && (
        <TouchableOpacity style={styles.confirmButton} onPress={createAppointment}>
          <Text style={styles.confirmButtonText}>Randevuyu Onayla</Text>
        </TouchableOpacity>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
  },
  loadingText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#6b7280',
    marginTop: 12,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
    padding: 24,
  },
  errorText: {
    fontSize: 18,
    fontFamily: 'Inter-Medium',
    color: '#ef4444',
    marginBottom: 24,
  },
  backButton: {
    backgroundColor: '#3b82f6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  backButtonText: {
    color: '#ffffff',
    fontFamily: 'Inter-Medium',
    fontSize: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 24,
    paddingTop: 60,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  backIcon: {
    marginRight: 16,
  },
  headerTitle: {
    fontSize: 20,
    fontFamily: 'Inter-Bold',
    color: '#1e293b',
  },
  serviceInfo: {
    backgroundColor: '#ffffff',
    padding: 24,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  serviceName: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  businessName: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#6b7280',
    marginBottom: 4,
  },
  servicePrice: {
    fontSize: 16,
    fontFamily: 'Inter-Medium',
    color: '#059669',
  },
  stepsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 24,
    backgroundColor: '#ffffff',
  },
  step: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#e5e7eb',
    justifyContent: 'center',
    alignItems: 'center',
  },
  activeStep: {
    backgroundColor: '#3b82f6',
  },
  stepText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#6b7280',
  },
  activeStepText: {
    color: '#ffffff',
  },
  stepLine: {
    width: 40,
    height: 2,
    backgroundColor: '#e5e7eb',
    marginHorizontal: 8,
  },
  activeStepLine: {
    backgroundColor: '#3b82f6',
  },
  content: {
    flex: 1,
  },
  stepContent: {
    padding: 24,
  },
  stepTitle: {
    fontSize: 20,
    fontFamily: 'Inter-Bold',
    color: '#1e293b',
    marginBottom: 24,
  },
  staffCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: '#e5e7eb',
  },
  selectedStaffCard: {
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  staffAvatar: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#f3f4f6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  staffName: {
    fontSize: 16,
    fontFamily: 'Inter-Medium',
    color: '#1e293b',
    marginLeft: 12,
  },
  noStaffText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#6b7280',
    textAlign: 'center',
    marginTop: 40,
  },
  datesContainer: {
    marginBottom: 24,
  },
  dateCard: {
    backgroundColor: '#ffffff',
    padding: 16,
    borderRadius: 12,
    marginRight: 12,
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#e5e7eb',
    minWidth: 80,
  },
  selectedDateCard: {
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  dayName: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#6b7280',
    marginBottom: 4,
  },
  dayNumber: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: '#1e293b',
  },
  selectedDateText: {
    color: '#3b82f6',
  },
  timeSlotsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  timeSlot: {
    backgroundColor: '#ffffff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#e5e7eb',
  },
  selectedTimeSlot: {
    borderColor: '#3b82f6',
    backgroundColor: '#eff6ff',
  },
  timeSlotText: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#1e293b',
  },
  selectedTimeSlotText: {
    color: '#3b82f6',
  },
  noSlotsText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#6b7280',
    textAlign: 'center',
    marginTop: 40,
  },
  confirmButton: {
    backgroundColor: '#3b82f6',
    margin: 24,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  confirmButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontFamily: 'Inter-Bold',
  },
  ownerAvatar: {
    backgroundColor: '#3b82f6',
  },
  ownerInitial: {
    fontSize: 20,
  },
  ownerName: {
    fontFamily: 'Inter-Bold',
    color: '#3b82f6',
  },
  selectedIcon: {
    position: 'absolute',
    top: 8,
    right: 8,
  },
});
